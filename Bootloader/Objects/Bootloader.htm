<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Bootloader.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Bootloader.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Aug 12 18:38:54 2020
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; netPool &rArr; ethRead &rArr; ipRead &rArr; tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[34]">CEC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md_vl.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[35]">TIM6_DAC_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_md_vl.o(.text) referenced from startup_stm32f10x_md_vl.o(RESET)
 <LI><a href="#[39]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md_vl.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[8a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[43]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3e]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[8e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[90]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[91]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[92]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[93]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[94]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[95]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[96]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[48]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[a5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[40]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[44]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; netPool &rArr; ethRead &rArr; ipRead &rArr; tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[47]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[aa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[49]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ab]"></a>__get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[ac]"></a>__set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[ad]"></a>__get_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[73]"></a>__set_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, core_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpToMainApp
</UL>

<P><STRONG><a name="[ae]"></a>__REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[af]"></a>__REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[86]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFilter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreate
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_vl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md_vl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[3f]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[57]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTableSearch
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFilter
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b1]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[46]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ba]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, delay.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timingDelayDecrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_vl.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>arpAdd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arp.o(i.arpAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arpAdd &rArr; arpTableSearch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTableSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFilter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFilter
</UL>

<P><STRONG><a name="[56]"></a>arpFilter</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, arp.o(i.arpFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arpFilter &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSend
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethRead
</UL>

<P><STRONG><a name="[59]"></a>arpResolve</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, arp.o(i.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSend
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTableSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSend
</UL>

<P><STRONG><a name="[55]"></a>arpTableSearch</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, arp.o(i.arpTableSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = arpTableSearch &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpAdd
</UL>

<P><STRONG><a name="[6e]"></a>checksum</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, net.o(i.checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFilter
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipReSend
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpRead
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
</UL>

<P><STRONG><a name="[77]"></a>delayInit</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, delay.o(i.delayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>delay_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>enc28j60Init</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60Init &rArr; enc28j60WritePhy &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteRegByte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WritePhy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadRegByte
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[63]"></a>enc28j60PacketReceive</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, enc28j60.o(i.enc28j60PacketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadRegByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netPool
</UL>

<P><STRONG><a name="[65]"></a>enc28j60PacketSend</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60PacketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteReg
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethReSend
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSend
</UL>

<P><STRONG><a name="[5b]"></a>enc28j60WriteOp</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, enc28j60.o(i.enc28j60WriteOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteRegByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>

<P><STRONG><a name="[6a]"></a>ethReSend</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net.o(i.ethReSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ethReSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipReSend
</UL>

<P><STRONG><a name="[6b]"></a>ethRead</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net.o(i.ethRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ethRead &rArr; ipRead &rArr; tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipRead
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netPool
</UL>

<P><STRONG><a name="[58]"></a>ethSend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net.o(i.ethSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFilter
</UL>

<P><STRONG><a name="[76]"></a>flashLock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash.o(i.flashLock))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>flashPageErase</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, flash.o(i.flashPageErase))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>flashRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flash.o(i.flashRead))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>flashUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash.o(i.flashUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>flashWriteData</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, flash.o(i.flashWriteData))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>getTcpStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tcp.o(i.getTcpStatus))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>icmpRead</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, net.o(i.icmpRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icmpRead &rArr; ipReSend &rArr; ethReSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipReSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipRead
</UL>

<P><STRONG><a name="[6f]"></a>ipReSend</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, net.o(i.ipReSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ipReSend &rArr; ethReSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethReSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpRead
</UL>

<P><STRONG><a name="[6c]"></a>ipRead</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, net.o(i.ipRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ipRead &rArr; tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpPool
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethRead
</UL>

<P><STRONG><a name="[71]"></a>ipSend</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, net.o(i.ipSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFilter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
</UL>

<P><STRONG><a name="[72]"></a>jumpToMainApp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(i.jumpToMainApp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jumpToMainApp
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_MSP
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 710 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; netPool &rArr; ethRead &rArr; ipRead &rArr; tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRead
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpClose
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netPool
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTcpStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashUnlock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashPageErase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLock
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpToMainApp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[78]"></a>netInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = netInit &rArr; enc28j60Init &rArr; enc28j60WritePhy &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>netPool</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, net.o(i.netPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netPool &rArr; ethRead &rArr; ipRead &rArr; tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethRead
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>spi1Init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, enc28j60.o(i.spi1Init))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[69]"></a>spiRecive</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, enc28j60.o(i.spiRecive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spiRecive
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTranmittRecive
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>

<P><STRONG><a name="[68]"></a>spiTranmittRecive</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, enc28j60.o(i.spiTranmittRecive))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRecive
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuf
</UL>

<P><STRONG><a name="[67]"></a>spiTransmit</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, enc28j60.o(i.spiTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTranmittRecive
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuf
</UL>

<P><STRONG><a name="[84]"></a>tcpClose</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, tcp.o(i.tcpClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcpClose &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>tcpCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(i.tcpCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>tcpFilter</STRONG> (Thumb, 1844 bytes, Stack size 32 bytes, tcp.o(i.tcpFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpPool
</UL>

<P><STRONG><a name="[7a]"></a>tcpListen</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcp.o(i.tcpListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpListen
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>tcpPool</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcp.o(i.tcpPool))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcpPool &rArr; tcpFilter &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipRead
</UL>

<P><STRONG><a name="[7c]"></a>tcpRead</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, tcp.o(i.tcpRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpRead
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>tcpSendData</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, tcp.o(i.tcpSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpSendData &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toApplMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>timingDelayDecrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.timingDelayDecrement))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>toApplMode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.toApplMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = toApplMode &rArr; tcpSendData &rArr; ipSend &rArr; arpResolve &rArr; ethSend &rArr; enc28j60PacketSend &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendData
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteData
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashUnlock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashPageErase
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashLock
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[51]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[52]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[64]"></a>enc28j60ReadBuf</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60ReadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enc28j60ReadBuf &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTranmittRecive
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[5d]"></a>enc28j60ReadOp</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, enc28j60.o(i.enc28j60ReadOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enc28j60ReadOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRecive
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadRegByte
</UL>

<P><STRONG><a name="[5f]"></a>enc28j60ReadRegByte</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60ReadRegByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60ReadRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WritePhy
</UL>

<P><STRONG><a name="[62]"></a>enc28j60SetBank</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60SetBank))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteRegByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadRegByte
</UL>

<P><STRONG><a name="[66]"></a>enc28j60WriteBuf</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, enc28j60.o(i.enc28j60WriteBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enc28j60WriteBuf &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[61]"></a>enc28j60WritePhy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60WritePhy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60WritePhy &rArr; enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteRegByte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteReg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadRegByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[5e]"></a>enc28j60WriteReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60WriteReg &rArr; enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteRegByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WritePhy
</UL>

<P><STRONG><a name="[60]"></a>enc28j60WriteRegByte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(i.enc28j60WriteRegByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60WriteRegByte &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; spiTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteReg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WritePhy
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
